/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package LinkedList;

import org.junit.Test;

import javax.annotation.Nullable;
import java.util.ArrayList;

import static org.junit.Assert.*;

public class AppTest {

    String one = "one";
    String two = "two";
    String three = "three";
    String four = "four";

    @Test
    public void testLinkedListHead() {
        LinkedList testList = new LinkedList();
        testList.insert(one);

        assertEquals(testList.head.reference, null);
        assertEquals(testList.head.value, one);
    }

    @Test
    public void testInsert() {
        LinkedList testList = new LinkedList();
        testList.insert(one);
        Object endOfList = testList.head;

        testList.insert(two);

        assertEquals(testList.head.reference, endOfList);
        assertEquals(testList.head.value, two);

        testList.insert(three);

        assertEquals(testList.head.reference.reference.value, one);
        assertEquals(testList.head.value, three);
    }

    @Test
    public void testInsertInt() {
        LinkedList testListInt = new LinkedList();
        testListInt.insert(1);

        Object endOfList = testListInt.head;

        testListInt.insert(2);

        assertEquals(testListInt.head.reference, endOfList);
        assertEquals(testListInt.head.value, 2);

        testListInt.insert(3);

        assertEquals(testListInt.head.reference.reference.value, 1);
        assertEquals(testListInt.head.value, 3);
    }

    @Test
    public void testIncludes() {
        LinkedList testList = new LinkedList();
        testList.insert(one);
        testList.insert(two);
        testList.insert(three);
        testList.insert(four);

        assertTrue(testList.includes(one));
        assertTrue(testList.includes(two));
        assertTrue(testList.includes(three));
        assertTrue(testList.includes(four));
        assertFalse(testList.includes("Seven"));
    }

    @Test
    public void testIncludesInt() {
        LinkedList testListInt = new LinkedList();
        testListInt.insert(1);
        testListInt.insert(2);
        testListInt.insert(3);
        testListInt.insert(4);

        assertTrue(testListInt.includes(1));
        assertTrue(testListInt.includes(2));
        assertTrue(testListInt.includes(3));
        assertTrue(testListInt.includes(4));
        assertFalse(testListInt.includes(7));
    }

    @Test
    public void testEmptyIncludes() {
        LinkedList testList = new LinkedList();

        assertFalse(testList.includes(one));
    }

    @Test
    public void testPrint() {
        LinkedList testList = new LinkedList();
        testList.insert(one);
        testList.insert(two);
        testList.insert(three);
        testList.insert(four);

        ArrayList<String> expectedReturn = new ArrayList<>();
        expectedReturn.add(four);
        expectedReturn.add(three);
        expectedReturn.add(two);
        expectedReturn.add(one);

        assertEquals(testList.print(), expectedReturn);

    }

    @Test
    public void testPrintInt() {
        LinkedList testListInt = new LinkedList();
        testListInt.insert(1);
        testListInt.insert(2);
        testListInt.insert(3);
        testListInt.insert(4);

        ArrayList<Integer> expectedReturn = new ArrayList<>();
        expectedReturn.add(4);
        expectedReturn.add(3);
        expectedReturn.add(2);
        expectedReturn.add(1);

        assertEquals(testListInt.print(), expectedReturn);

    }

    @Test
    public void testEmptyPrint() {
        LinkedList testList = new LinkedList();

        ArrayList<String> emptyReturn = new ArrayList<>();

        assertEquals(emptyReturn, testList.print());
    }

    @Test
    public void testAppend() {
        LinkedList testList = new LinkedList();
        testList.insert(one);
        testList.insert(two);
        testList.append(three);

        assertEquals(three, testList.head.reference.reference.value);
        assertEquals(null, testList.head.reference.reference.reference);
    }


    @Test
    public void testInsertBefore() {
        LinkedList testList = new LinkedList();
        testList.insert(one);
        testList.insert(two);
        testList.insertBefore(three, one);

        System.out.println("testInsertBefore" + testList.print());

        assertTrue(testList.includes(three));
        assertEquals(three, testList.head.reference.value);
    }

    @Test
    public void testInsertAfter() {
        LinkedList testList = new LinkedList();
        testList.insert(one);
        testList.insert(two);
        testList.insertAfter(three, one);

        System.out.println("testInsertAfter" + testList.print());
    }
}
